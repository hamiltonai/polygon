#!/usr/bin/env python3
"""
Test NASDAQ Pull - Validate Symbol Availability
Pulls all NASDAQ stocks from Polygon and checks for specific test symbols
"""

import logging
import time
from polygon import RESTClient
from config import POLYGON_API_KEY
from utils import get_date_str

# Test symbols to look for
TEST_SYMBOLS = ['QSG', 'OUST', 'QUBT']

logger = logging.getLogger(__name__)

def test_nasdaq_pull_with_validation():
    """
    Pull all NASDAQ stocks from Polygon and validate test symbols are present
    
    Returns:
        dict: Results containing symbols found, test results, and statistics
    """
    print("üîç TESTING NASDAQ SYMBOL PULL FROM POLYGON")
    print("=" * 60)
    
    if not POLYGON_API_KEY:
        print("‚ùå ERROR: POLYGON_API_KEY not found in environment variables")
        return None
    
    print(f"API Key: {POLYGON_API_KEY[:8]}...")
    print(f"Test symbols: {', '.join(TEST_SYMBOLS)}")
    print()
    
    try:
        client = RESTClient(POLYGON_API_KEY)
        
        print("üì° Fetching NASDAQ symbols from Polygon...")
        start_time = time.time()
        
        # Fetch all NASDAQ tickers with pagination
        all_tickers = []
        page_count = 0
        max_pages = 25  # Reasonable limit for testing
        
        tickers_iter = client.list_tickers(
            market="stocks", 
            exchange="XNAS",  # NASDAQ exchange
            active=True, 
            limit=1000
        )
        
        print("Processing pages: ", end="", flush=True)
        
        for ticker in tickers_iter:
            # Filter out warrants, ETFs, and non-stock symbols
            if hasattr(ticker, 'type') and ticker.type != 'CS':
                continue
            
            # Exclude if symbol contains "/" (often used for warrants)
            if '/' in ticker.ticker:
                continue
            
            # Additional filtering for valid stock symbols
            symbol = ticker.ticker.strip().upper()
            if symbol.isalpha() and len(symbol) <= 6:
                all_tickers.append({
                    'symbol': symbol,
                    'name': getattr(ticker, 'name', 'N/A'),
                    'type': getattr(ticker, 'type', 'N/A'),
                    'market': getattr(ticker, 'market', 'N/A'),
                    'active': getattr(ticker, 'active', 'N/A'),
                    'currency_name': getattr(ticker, 'currency_name', 'N/A'),
                })
            
            # Progress indicator
            if len(all_tickers) % 500 == 0:
                print(".", end="", flush=True)
            
            page_count += 1
            if page_count >= max_pages * 1000:  # Rough page estimation
                print(f"\n‚ö†Ô∏è Reached safety limit, stopping at {len(all_tickers)} symbols")
                break
        
        fetch_time = time.time() - start_time
        print(f"\n‚úÖ Completed in {fetch_time:.1f} seconds")
        print()
        
        # Remove duplicates and sort
        unique_symbols = {}
        for ticker in all_tickers:
            symbol = ticker['symbol']
            if symbol not in unique_symbols:
                unique_symbols[symbol] = ticker
        
        all_symbols_list = sorted(list(unique_symbols.keys()))
        
        print("üìä NASDAQ SYMBOLS SUMMARY")
        print("-" * 40)
        print(f"Total symbols found: {len(all_symbols_list):,}")
        print(f"Fetch time: {fetch_time:.1f} seconds")
        print(f"Average speed: {len(all_symbols_list)/fetch_time:.1f} symbols/second")
        print()
        
        # Test specific symbols
        print("üéØ TEST SYMBOL VALIDATION")
        print("-" * 40)
        
        test_results = {}
        for test_symbol in TEST_SYMBOLS:
            if test_symbol in unique_symbols:
                ticker_info = unique_symbols[test_symbol]
                test_results[test_symbol] = {
                    'found': True,
                    'info': ticker_info
                }
                print(f"‚úÖ {test_symbol}: FOUND")
                print(f"   Name: {ticker_info['name']}")
                print(f"   Type: {ticker_info['type']}")
                print(f"   Active: {ticker_info['active']}")
                print(f"   Currency: {ticker_info['currency_name']}")
            else:
                test_results[test_symbol] = {
                    'found': False,
                    'info': None
                }
                print(f"‚ùå {test_symbol}: NOT FOUND")
            print()
        
        # Summary of test results
        found_count = sum(1 for result in test_results.values() if result['found'])
        total_test = len(TEST_SYMBOLS)
        
        print("üìã TEST RESULTS SUMMARY")
        print("-" * 40)
        print(f"Test symbols found: {found_count}/{total_test}")
        print(f"Success rate: {(found_count/total_test)*100:.1f}%")
        
        if found_count == total_test:
            print("üéâ ALL TEST SYMBOLS FOUND - Ready for testing!")
        elif found_count > 0:
            print("‚ö†Ô∏è PARTIAL SUCCESS - Some symbols missing")
        else:
            print("‚ùå NO TEST SYMBOLS FOUND - Check symbol validity")
        
        print()
        
        # Show sample of other symbols for context
        print("üìù SAMPLE OF OTHER NASDAQ SYMBOLS")
        print("-" * 40)
        sample_symbols = all_symbols_list[:20]
        for i, symbol in enumerate(sample_symbols, 1):
            name = unique_symbols[symbol]['name']
            print(f"{i:2d}. {symbol:<6} - {name}")
        
        if len(all_symbols_list) > 20:
            print(f"... and {len(all_symbols_list) - 20:,} more symbols")
        
        print()
        
        # Export results
        date_str = get_date_str()
        
        # Create CSV of all symbols
        csv_filename = f"nasdaq_test_symbols_{date_str}.csv"
        with open(csv_filename, 'w', newline='') as f:
            import csv
            fieldnames = ['symbol', 'name', 'type', 'market', 'active', 'currency_name']
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            
            for symbol in all_symbols_list:
                ticker_info = unique_symbols[symbol]
                writer.writerow(ticker_info)
        
        print(f"üíæ EXPORTED RESULTS")
        print("-" * 40)
        print(f"All symbols saved to: {csv_filename}")
        
        # Create test results JSON
        import json
        results_filename = f"nasdaq_test_results_{date_str}.json"
        
        results_data = {
            'test_date': date_str,
            'test_time': time.strftime('%H:%M:%S'),
            'total_symbols_found': len(all_symbols_list),
            'fetch_time_seconds': fetch_time,
            'test_symbols': TEST_SYMBOLS,
            'test_results': test_results,
            'found_count': found_count,
            'success_rate': (found_count/total_test)*100,
            'sample_symbols': sample_symbols
        }
        
        with open(results_filename, 'w') as f:
            json.dump(results_data, f, indent=2)
        
        print(f"Test results saved to: {results_filename}")
        print()
        
        return results_data
        
    except Exception as e:
        error_msg = f"Error testing NASDAQ pull: {str(e)}"
        print(f"‚ùå {error_msg}")
        logger.error(error_msg)
        return None

def quick_symbol_check(symbols_to_check=None):
    """
    Quick check for specific symbols without full NASDAQ pull
    
    Args:
        symbols_to_check: List of symbols to check, defaults to TEST_SYMBOLS
    """
    if symbols_to_check is None:
        symbols_to_check = TEST_SYMBOLS
    
    print("üîç QUICK SYMBOL CHECK")
    print("=" * 40)
    
    try:
        client = RESTClient(POLYGON_API_KEY)
        
        for symbol in symbols_to_check:
            print(f"Checking {symbol}...", end=" ")
            
            try:
                # Try to get ticker details
                ticker_details = client.get_ticker_details(symbol)
                
                if ticker_details:
                    print("‚úÖ EXISTS")
                    if hasattr(ticker_details, 'name'):
                        print(f"   Name: {ticker_details.name}")
                    if hasattr(ticker_details, 'market'):
                        print(f"   Market: {ticker_details.market}")
                    if hasattr(ticker_details, 'primary_exchange'):
                        print(f"   Exchange: {ticker_details.primary_exchange}")
                else:
                    print("‚ùå NOT FOUND")
                    
            except Exception as e:
                print(f"‚ùå ERROR: {str(e)}")
            
            print()
    
    except Exception as e:
        print(f"‚ùå Quick check failed: {str(e)}")

def main():
    """Main function for command line usage"""
    import sys
    
    # Setup basic logging
    logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
    
    # Check API key
    if not POLYGON_API_KEY:
        print("‚ùå Please set POLYGON_API_KEY in your .env file")
        return
    
    # Parse command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == 'quick':
            # Quick check mode
            symbols_to_check = TEST_SYMBOLS
            if len(sys.argv) > 2:
                # Custom symbols provided
                symbols_to_check = [s.strip().upper() for s in sys.argv[2].split(',')]
            
            quick_symbol_check(symbols_to_check)
            return
        elif sys.argv[1] == 'help':
            print("Usage:")
            print("  python test_nasdaq_pull.py           # Full NASDAQ pull and test")
            print("  python test_nasdaq_pull.py quick     # Quick check of test symbols")
            print("  python test_nasdaq_pull.py quick AAPL,MSFT,GOOGL  # Quick check custom symbols")
            return
    
    # Default: Full test
    results = test_nasdaq_pull_with_validation()
    
    if results:
        print("üéØ READY FOR NEXT STEPS")
        print("-" * 40)
        print("1. Review the test results above")
        print("2. If all test symbols found, run your main workflow")
        print("3. Check the exported CSV for symbol validation")
        print("4. Use the JSON results for further analysis")
    else:
        print("‚ùå Test failed - check your API key and connection")
        sys.exit(1)

if __name__ == "__main__":
    main()